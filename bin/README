This is a brief description of the contents of this directory.

In general, many things are specific to my course, so to use this, it is best
to go over the complete tree, understand how things work and modify
accordingly.  It relies on a lot of scripts etc, which means that you should
use it on a Unix machine, preferrably linux.  (Of course, this is all
transparent for students who can use any platform they like.)  If you intend to
use it, make sure you understand how the scripts work -- I found that using
this is much better than paperwork, but you must be very careful with the data,
not to lose anything (best on a system with proper backups), and not to make
things visible when they shouldn't.

NOTE: large parts of this description are now outdated, if you want to use it,
bug me to write a proper description.

  collects/$COURSE
    Source for the plugin students install, contains the handin button and code
    and several homework- and course-specific languages.

  collects/handin-server
    The source files for the server, which is maintained as part of the Racket
    tree.  See the handin-server manual for details on the server and client,
    and on how to configure them.

  utils/sh-init
    Shell code that is used to initialize other scripts: configures things like
    the location of the Racket installation and the course directory.

  utils/course-utils.rkt
    Some common utilities for various scripts.

  utils/lecture.el
    Elisp code to use Emacs and DrRacket in class.

  utils/web-utils.rkt
    Support for the "web.rkt" script that generates the course web pages.

  compute-grades
    A script that scans the complete "hw" directory, collects all grades,
    creates files in the students' directories with their grades and annotated
    submissions, summarizes grades into the "grades" file.  The grade is
    created by scanning graded files, and finding lines with a ";>" comment
    which indicate our addition.  These lines can have grade data as <+N> and
    <-N> to add or subtract from the current grade (beginning at 0), and <*N%>
    to factor the final grade by some precentage.  For example, a file might
    contain:

      | ;;> Student: foo (Foo Bar)
      | ;;> Student: joe (Joe Shmoe)
      | ;;> Maximum points for this assignment: <+100>
      | ;;> Submitted in "hw04-late", <*85%>
      |
      | (define (foo x)
      |   ;;> You don't handle blah <-10>
      |   (bar (/ 1 x))) ;> what if x=0? <-3>
      |
      | ;;> missing answer for question 2 <-20>

    which indicates a grade of (* 0.85 (- 100 10 3 20)).  (The first few lines
    can be generated by utilities in the handin server.)  This script can be
    customized by "hw/grades.rkt" (see below).

  pack-submissions
  unpack-submissions
    Two scripts for packing up student submission to send to graders, and
    unpacking graded works.  Run them with no arguments to see how they are
    used.  Usually, the first script creates a "grading.tgz" file that contains
    all submissions from the specified homework directory -- each file in this
    tgz will have a name of "<student-id>.rkt".  The second script unpacks an
    input "grading.tgz" and spreads the files as graded works in each student
    directory, then call the "compute-grades" script to update relevant data.
    To make several iterations possible, the first script will use
    <student>/graded.rkt if one is found.  See also the descriptions of
    "hw/hw??/<student>/*" below.  (Note: the actual suffix that is used may be
    different than ".rkt" -- the scripts will use any existing suffix they
    find, as long as it is consistent.)

  sync-submissions
    Alternative to above two scripts -- synchronizes the submission files to a
    subversion repository.  The synchronization is bi-directional, based on
    file times.

  drracket
    Convenient script that starts DrRacket with the environment variables set
    to use the code in "collects".

  start-server
    A script that starts the server, and restarts it whenever it dies
    (intentionally or not.

  web.rkt
    Complete source for the course web pages.  Builds all into the "web"
    directory and copies over to an external server and to hw/web/htdocs.

  content
    Additional content that would get copied to the web directory (grade
    stats, .plt file, files needed for homeworks etc).  The "web.rkt"
    script creates a bunch of additional files in this directory (eg,
    class notes and grade graphs), and then copies it to the external
    web server (but only files get copied, not directories).

  roulette
    This directory holds "roulette.rkt" -- a fun little roulette utility that
    chooses a random student if you want to choose a random student for a
    question.  Space rolls up the next student, then type something and hit
    enter and that will be saved in a log file so you can track how students
    are doing in class.  Also in this directory are "roulette-log.txt" which
    holds text that was entered, "roulette-state.rkt" that saves the state
    (which students are left for questions), and "roulette.js" which is a quick
    javascript file that makes it easier to start the above program on Windows.

  hw
    This directory contains all volatile data and course-specific
    configurations.  Specifically, it contains all homework-related files, each
    in a separate directory.  You can add any directories you want here,
    including things that are not actually homeworks, for example, "Summary"
    and "karma".  (The server configuration file determines which directories
    are active and inactive assignment directories.)

  hw/config.rktd
    Configuration file for the submission server.  See "collects/handin-server"
    above for this.

  hw/users.rktd
    This file will have entries for students that register for the course
    (through the handin tool).

  hw/private-key.pem
  hw/server-cert.pem
    Required for the secure server.  You will need to create new
    versions of these files so your server will be secure.  See
    "collects/handin-server/doc.txt" for instructions.  For PL I go into
    a new directory, run
      openssl req -new -nodes -x509 -days 365 \
              -out server-cert.pem -keyout private-key.pem
    enter the following lines:
      US
      Massachusetts
      Boston
      PL
      Course Plugin
      PL Server
      eli@barzilay.org
    and copy the resulting two files to the right places.

  hw/log.rktd
  hw/web-log.rktd
    These files will contain logs of the submission server, and of its embedded
    web-server.  It's best not to let these files accumulate stuff over the
    semester.

  hw/grades.rkt
    If this file exists, it is `load'ed before "compute-grades" runs.  This can
    be used to set several hooks and customize grade computation.  See
    "compute-grades" for the hooks (the names are all "!" prefixed.)

  hw/grades
    This is a text file that the "compute-grades" script will create.  It will
    have a table for students and grades, sorted by a estimated totals.  The
    only homeworks that count are ones that have a "factor" file.  See below.

  hw/Summary
    This directory has an entry for each student that has a summary of their
    work so far: their grade in every homework, and their estimated course
    total grade (using the factors).

  hw/karma
    I use this directory to have "karma" grades and class participation grades.
    I do not specify this directory as an inactive submission directory, so
    students know about it only from the above summaries.

  hw/hw??
    One directory for each homework.

  hw/hw??/checker.rkt
    A script that checks submissions into this directory.  It usually uses
    libraries from the handin-server collection -- see the documentation there
    for more details.

    You can add as many checks as you want into these files, from simple type
    checks (is `foo' bound to an integer?) to actually trying out the functions
    and not accepting bogus submissions.  But note that checking that the
    functions work means that you can make it is impossible to submit code
    unless it is perfect.

  hw/hw??/solution.rkt
    Once the problem set deadline is over, you can create this file, it will be
    available through the server as the posted solution.  (Other suffixes
    possible, actually, any file that begins with "solution".)

  hw/hw??/solution/...
    Alternatively, you can have several files related to the solution, if you
    create this directory.  (But students cannot submit more than a single
    file.)

  hw/hw??/factor
    This is the factor assigned to this homework, the contents of this file
    should be two numbers N and M which are used as a factor for grades in this
    homework.  The M part is the total number of points for the homework
    (without bonus, if you really want it to be a bonus), and the N part is its
    weight for the total grade.  By default (if `compute-grades' is not
    changed), the total grade for a student with grades G1, G2, ... (excluding
    waived grades) is
      (G1*N1/M1 + G2*N2/M2 + ...) / (N1 + N2 + ...)
    Note the M part is used to create the grade that students see, and the N
    part is used to compute the averahe, so "20 20" is different from "1 1".
    The two parts are actually passed through `eval', so they can be Racket
    expressions.  Factors can also be specified by setting a `!get-factor'
    function (see above).

  hw/hw??/<student>
    A directory that holds all data for <student> and "hw??".  <student> can
    actually be "student1-student2" (or more) if submission is allowed in
    pairs (or bigger groups).

  hw/hw??/<student>/hw.rkt
    Each of these directories will have a "hw.rkt" holding the original
    submitted file.  This file is the original one from DrRacket, it is not in
    text form.  (This name is actually determined by the "checker.rkt" script.)

  hw/hw??/<student>/grading/text.rkt
    The "checker.rkt" scripts translate the input binary file into a text
    version here.  This is where the "compute-grades" gets its files from.
    (Can use a different suffix, as long as they are all consistent for each
    homework directory.)

  hw/hw??/<student>/graded.rkt
    After grading, "unpack-submissions" creates these files.  (Again, can be a
    different suffix.)

  hw/hw??/<student>/graded.html
    The "compute-grades" script will create this file from the previous one, it
    contains an HTML version of the graded file, with the ";>" comments
    highlighted, and with a final grade for this submission.

  hw/hw??/<student>/grade
    The "compute-grades" script will create these files with the actual grade
    for this submission (in the form of "<points>/<total>").  Any text in this
    file is displayed by the server to students as the `grade' in this
    assignment.  The script will only create it if there is a "graded.rkt" file
    in this directory (or a different extension, when used).  If you want to
    dismiss a submission for some student who didn't submit, put anything in
    this file that is not a number and it will not be considered when computing
    the total grade.  If you put a single "*" or a "?" then the entry in the
    "hw/Summary" will say "dismissed" or "ungraded".  (This is all done by the
    default `compute-grades', which can be overridden.)  If you don't create
    this file, and there was no submission, then this counts as 0, and the
    student will see a "not submitted" comment in the summary.

  hw/tst1
  hw/tst1/checker.rkt
  hw/tst1/solution.*
  hw/tst1/factor
  hw/tst2/...
    One directory per exam.  I only create a "<student>/graded.txt" file for
    each student and the "compute-grades" script will use these when computing
    the grades.  Other files are just like any other homework; the checker is
    just a dummy file to avoid submitting into the directory.
